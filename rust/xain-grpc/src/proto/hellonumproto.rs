// This file is generated by rust-protobuf 2.8.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `hellonumproto.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_1;

#[derive(PartialEq,Clone,Default)]
pub struct NumProtoRequest {
    // message fields
    pub arr: ::protobuf::SingularPtrField<super::ndarray::NDArray>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a NumProtoRequest {
    fn default() -> &'a NumProtoRequest {
        <NumProtoRequest as ::protobuf::Message>::default_instance()
    }
}

impl NumProtoRequest {
    pub fn new() -> NumProtoRequest {
        ::std::default::Default::default()
    }

    // .numproto.protobuf.NDArray arr = 1;


    pub fn get_arr(&self) -> &super::ndarray::NDArray {
        self.arr.as_ref().unwrap_or_else(|| super::ndarray::NDArray::default_instance())
    }
    pub fn clear_arr(&mut self) {
        self.arr.clear();
    }

    pub fn has_arr(&self) -> bool {
        self.arr.is_some()
    }

    // Param is passed by value, moved
    pub fn set_arr(&mut self, v: super::ndarray::NDArray) {
        self.arr = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_arr(&mut self) -> &mut super::ndarray::NDArray {
        if self.arr.is_none() {
            self.arr.set_default();
        }
        self.arr.as_mut().unwrap()
    }

    // Take field
    pub fn take_arr(&mut self) -> super::ndarray::NDArray {
        self.arr.take().unwrap_or_else(|| super::ndarray::NDArray::new())
    }
}

impl ::protobuf::Message for NumProtoRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.arr {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.arr)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.arr.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.arr.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> NumProtoRequest {
        NumProtoRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::ndarray::NDArray>>(
                    "arr",
                    |m: &NumProtoRequest| { &m.arr },
                    |m: &mut NumProtoRequest| { &mut m.arr },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<NumProtoRequest>(
                    "NumProtoRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static NumProtoRequest {
        static mut instance: ::protobuf::lazy::Lazy<NumProtoRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const NumProtoRequest,
        };
        unsafe {
            instance.get(NumProtoRequest::new)
        }
    }
}

impl ::protobuf::Clear for NumProtoRequest {
    fn clear(&mut self) {
        self.arr.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for NumProtoRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NumProtoRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct NumProtoReply {
    // message fields
    pub arr: ::protobuf::SingularPtrField<super::ndarray::NDArray>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a NumProtoReply {
    fn default() -> &'a NumProtoReply {
        <NumProtoReply as ::protobuf::Message>::default_instance()
    }
}

impl NumProtoReply {
    pub fn new() -> NumProtoReply {
        ::std::default::Default::default()
    }

    // .numproto.protobuf.NDArray arr = 1;


    pub fn get_arr(&self) -> &super::ndarray::NDArray {
        self.arr.as_ref().unwrap_or_else(|| super::ndarray::NDArray::default_instance())
    }
    pub fn clear_arr(&mut self) {
        self.arr.clear();
    }

    pub fn has_arr(&self) -> bool {
        self.arr.is_some()
    }

    // Param is passed by value, moved
    pub fn set_arr(&mut self, v: super::ndarray::NDArray) {
        self.arr = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_arr(&mut self) -> &mut super::ndarray::NDArray {
        if self.arr.is_none() {
            self.arr.set_default();
        }
        self.arr.as_mut().unwrap()
    }

    // Take field
    pub fn take_arr(&mut self) -> super::ndarray::NDArray {
        self.arr.take().unwrap_or_else(|| super::ndarray::NDArray::new())
    }
}

impl ::protobuf::Message for NumProtoReply {
    fn is_initialized(&self) -> bool {
        for v in &self.arr {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.arr)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.arr.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.arr.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> NumProtoReply {
        NumProtoReply::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::ndarray::NDArray>>(
                    "arr",
                    |m: &NumProtoReply| { &m.arr },
                    |m: &mut NumProtoReply| { &mut m.arr },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<NumProtoReply>(
                    "NumProtoReply",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static NumProtoReply {
        static mut instance: ::protobuf::lazy::Lazy<NumProtoReply> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const NumProtoReply,
        };
        unsafe {
            instance.get(NumProtoReply::new)
        }
    }
}

impl ::protobuf::Clear for NumProtoReply {
    fn clear(&mut self) {
        self.arr.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for NumProtoReply {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NumProtoReply {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x13hellonumproto.proto\x12\rhellonumproto\x1a\x1fnumproto/protobuf/nd\
    array.proto\"?\n\x0fNumProtoRequest\x12,\n\x03arr\x18\x01\x20\x01(\x0b2\
    \x1a.numproto.protobuf.NDArrayR\x03arr\"=\n\rNumProtoReply\x12,\n\x03arr\
    \x18\x01\x20\x01(\x0b2\x1a.numproto.protobuf.NDArrayR\x03arr2d\n\x0eNumP\
    rotoServer\x12R\n\x10SayHelloNumProto\x12\x1e.hellonumproto.NumProtoRequ\
    est\x1a\x1c.hellonumproto.NumProtoReply\"\0J\xb2\x02\n\x06\x12\x04\0\0\
    \x10\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\t\n\x02\x03\0\x12\x03\x02\x07\
    (\n\x08\n\x01\x02\x12\x03\x04\x08\x15\n\n\n\x02\x06\0\x12\x04\x06\0\x08\
    \x01\n\n\n\x03\x06\0\x01\x12\x03\x06\x08\x16\n\x0b\n\x04\x06\0\x02\0\x12\
    \x03\x07\x02B\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\x07\x06\x16\n\x0c\n\
    \x05\x06\0\x02\0\x02\x12\x03\x07\x17&\n\x0c\n\x05\x06\0\x02\0\x03\x12\
    \x03\x071>\n\n\n\x02\x04\0\x12\x04\n\0\x0c\x01\n\n\n\x03\x04\0\x01\x12\
    \x03\n\x08\x17\n\x0b\n\x04\x04\0\x02\0\x12\x03\x0b\x02$\n\r\n\x05\x04\0\
    \x02\0\x04\x12\x04\x0b\x02\n\x19\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03\x0b\
    \x02\x1b\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x0b\x1c\x1f\n\x0c\n\x05\x04\
    \0\x02\0\x03\x12\x03\x0b\"#\n\n\n\x02\x04\x01\x12\x04\x0e\0\x10\x01\n\n\
    \n\x03\x04\x01\x01\x12\x03\x0e\x08\x15\n\x0b\n\x04\x04\x01\x02\0\x12\x03\
    \x0f\x02$\n\r\n\x05\x04\x01\x02\0\x04\x12\x04\x0f\x02\x0e\x17\n\x0c\n\
    \x05\x04\x01\x02\0\x06\x12\x03\x0f\x02\x1b\n\x0c\n\x05\x04\x01\x02\0\x01\
    \x12\x03\x0f\x1c\x1f\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x0f\"#b\x06pr\
    oto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
